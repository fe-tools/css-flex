@charset "UTF-8";

// handle param error

.flexError(@param, @type) {
  position: relative;
  background-color: #ff3c00 !important;
  overflow: hidden;

  &::after {
    position: absolute;
    bottom: 0;
    right: 0;
    padding: .5em;
    color: #ff3c00 !important;
    background-color: white !important;
    font-size: 12px;
    content: "ErrorParam: @{param} in @{type}";
  }
}


// flex-direction value is row

.flex(@justify: start, @align: top) {
  display: flex;
  flex-direction: row;

  & when ( @justify = start ) { justify-content: flex-start; }
  & when ( @justify = center ) { justify-content: center; }
  & when ( @justify = end ) { justify-content: flex-end; }
  & when ( @justify = between ) { justify-content: space-between; }
  & when ( @justify = around ) { justify-content: space-around; }
  & when (not( @justify = start ) and not( @justify = center ) and not( @justify = end ) and not( @justify = between ) and not( @justify = around )) {
    .flexError(@justify, 'flex')
  }

  & when ( @align = top ) { align-items: flex-start; }
  & when ( @align = middle ) { align-items: center; }
  & when ( @align = bottom ) { align-items: flex-end; }
  & when (not( @align = top ) and not( @align = middle ) and not( @align = bottom )) {
    .flexError(@align, 'flex')
  }

}

.flex-wrap(@align: top) {
  flex-wrap: wrap;

  & when ( @align = auto ) { align-content: initial; }
  & when ( @align = top ) { align-content: flex-start; }
  & when ( @align = middle ) { align-content: center; }
  & when ( @align = bottom ) { align-content: flex-end; }
  & when ( @align = between ) { align-content: space-between; }
  & when ( @align = around ) { align-content: space-around; }
  & when (not( @align = auto ) and not( @align = top ) and not( @align = middle ) and not( @align = bottom ) and not( @align = between ) and not( @align = around )) {
    .flexError(@align, 'flex-wrap')
  }

}

.flex-self(@flex: auto, @align: auto) {

  & when ( @flex = auto ) { flex: initial; }
  & when ( @flex = full ) { flex: auto; }
  & when ( @flex = keep ) { flex: none; }
  & when (not( @flex = auto ) and not( @flex = full ) and not( @flex = keep )) {
    .flexError(@flex, 'flex-self')
  }

  & when ( @align = auto ) { align-self: initial; }
  & when ( @align = top ) { align-self: flex-start; }
  & when ( @align = middle ) { align-self: center; }
  & when ( @align = bottom ) { align-self: flex-end; }
  & when ( @align = full ) { height: auto; align-self: stretch; }
  & when (not( @align = auto ) and not( @align = top ) and not( @align = middle ) and not( @align = bottom ) and not( @align = full )) {
    .flexError(@align, 'flex-self')
  }

}


// flex-direction value is column

.flex-column(@align: start, @justify: top) {
  display: flex;
  flex-direction: column;

  & when ( @align = start ) { align-items: flex-start; }
  & when ( @align = center ) { align-items: center; }
  & when ( @align = end ) { align-items: flex-end; }
  & when (not( @align = start ) and not( @align = center ) and not( @align = end )) {
    .flexError(@align, 'flex-column')
  }

  & when ( @justify = top ) { justify-content: flex-start; }
  & when ( @justify = middle ) { justify-content: center; }
  & when ( @justify = bottom ) { justify-content: flex-end; }
  & when ( @justify = between ) { justify-content: space-between; }
  & when ( @justify = around ) { justify-content: space-around; }
  & when (not( @justify = top ) and not( @justify = middle ) and not( @justify = bottom ) and not( @justify = between ) and not( @justify = around )) {
    .flexError(@justify, 'flex-column')
  }

}

.flex-column-wrap(@align: start) {
  flex-wrap: wrap;

  & when ( @align = auto ) { align-content: initial; }
  & when ( @align = start ) { align-content: flex-start; }
  & when ( @align = center ) { align-content: center; }
  & when ( @align = end ) { align-content: flex-end; }
  & when ( @align = between ) { align-content: space-between; }
  & when ( @align = around ) { align-content: space-around; }
  & when (not( @align = auto ) and not( @align = start ) and not( @align = center ) and not( @align = end ) and not( @align = between ) and not( @align = around )) {
    .flexError(@align, 'flex-column-wrap')
  }

}

.flex-column-self(@flex: auto, @align: auto) {

  & when ( @flex = auto ) { flex: initial; }
  & when ( @flex = full ) { flex: auto; }
  & when ( @flex = keep ) { flex: none; }
  & when (not( @flex = auto ) and not( @flex = full ) and not( @flex = keep )) {
    .flexError(@flex, 'flex-column-self')
  }

  & when ( @align = auto ) { align-self: initial; }
  & when ( @align = start ) { align-self: flex-start; }
  & when ( @align = center ) { align-self: center; }
  & when ( @align = end ) { align-self: flex-end; }
  & when ( @align = full ) { width: auto; align-self: stretch; }
  & when (not( @align = auto ) and not( @align = start ) and not( @align = center ) and not( @align = end ) and not( @align = full )) {
    .flexError(@align, 'flex-column-self')
  }

}